Shader "Custom/Toon/Water"
{
    Properties
    {
        _WaterColorDeep ("Deep Water Color", Color) = (.086, .407, 1, .749)
        _WaterColorShallow ("Shallow Water Color", Color) = (.325, .807, .971, .725)
        _DepthMaxDistance("Depth Max Distance", Float) = 1

        // Depth Texture If you don't want to use the depth texture from the camera
        _DepthTexture("Depth Texture", 2D) = "white" {}

        // Noise Texture for water surface
        _SurfaceNoise("Surface Noise", 2D) = "white" {}
        _SurfaceNoiseCutoff("Surface Noise Cutoff", Range(0,1)) = .777

        // Foam Properties
        _FoamColor("Foam Color", Color) = (1,1,1,1)
        _FoamMaxDistance("Foam Max Distance", Float) = .4
        _FoamMinDistance("Foam Min Distance", Float) = .04

        _SurfaceNoiseScroll("Surface Noise Scroll Amount", Vector) = (.03, .03, 0, 0)

        // Distortion Properties
        _DistortionTexture("Distortion Texture", 2D) = "white" {}
        _DistortionAmount("Distortion Amount", Float) = .27
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }

        Pass
        {
            //Blend SrcAlpha OneMinusSrcAlpha
            //ZWrite Off

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag

            #include "UnityCG.cginc"
            #define SMOOTHSTEP_AA 0.01

            fixed4 alphaBlend(fixed4 top, fixed4 bottom)
            {
                fixed3 color = (top.rgb * top.a) + (bottom.rgb * (1 - top.a));
                float alpha = top.a + bottom.a * (1 - top.a);

                return fixed4(color, alpha);
            }

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : NORMAL;
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float4 screenPosition : TEXCOORD2;
                float2 noiseUV : TEXCOORD0;
                float2 distortionUV : TEXCOORD1;
                float3 viewNormal : NORMAL;
            };

            fixed4 _WaterColorDeep;
            fixed4 _WaterColorShallow;
            float _DepthMaxDistance;

            // Created by Camera DepthTextureMode
            // and Created by NormalsShader as global texture
            sampler2D _CameraDepthTexture;
            sampler2D _CameraNormalsTexture;

            sampler2D _DepthTexture;

            sampler2D _SurfaceNoise;
            float4 _SurfaceNoise_ST;
            float _SurfaceNoiseCutoff;

            sampler2D _DistortionTexture;
            float4 _DistortionTexture_ST;
            float _DistortionAmount;

            fixed4 _FoamColor;

            float _FoamMaxDistance;
            float _FoamMinDistance;

            float2 _SurfaceNoiseScroll;

            v2f vert (appdata v)
            {
                v2f o;

                o.vertex = UnityObjectToClipPos(v.vertex);
                o.screenPosition = ComputeScreenPos(o.vertex);
                o.noiseUV = TRANSFORM_TEX(v.uv, _SurfaceNoise);
                o.distortionUV = TRANSFORM_TEX(v.uv, _DistortionTexture);
                o.viewNormal = COMPUTE_VIEW_NORMAL;
                
                return o;
            }

            fixed4 frag(v2f i) : SV_Target
            {   
                // This code works the same as tex2Dproj
                // float existingDepth01 = tex2D(_CameraDepthTexture, UNITY_PROJ_COORD(i.screenPosition.xy / i.screenPosition.w)).r;
                
                // Grab Depth value from depth texture, convert it to linear as tex2Dproj returns non-linear values
                float existingDepth01 = tex2Dproj(_CameraDepthTexture, UNITY_PROJ_COORD(i.screenPosition)).r;
                float existingDepthLinear = LinearEyeDepth(existingDepth01);
                
                // Convert depth value regardless of perspective or ortho
                /*float persp = LinearEyeDepth(existingDepth01);
                float ortho = (_ProjectionParams.z - _ProjectionParams.y) * (1 - existingDepth01) + _ProjectionParams.y;
                float depth = lerp(persp, ortho, unity_OrthoParams.w);*/

                // depth from depthTexture - depth from vertex
                float depthDifference = existingDepthLinear - i.screenPosition.w;

                // saturate: clamps value between 0 and 1
                // use a proportion of the max distance as lerp value between both colors
                float waterDepthDifference01 = saturate(depthDifference / _DepthMaxDistance);
                fixed4 waterColor = lerp(_WaterColorShallow, _WaterColorDeep, waterDepthDifference01);

                // grab normals from texture generated by camera
                float3 existingNormal = tex2Dproj(_CameraNormalsTexture, UNITY_PROJ_COORD(i.screenPosition));

                // get dot value clamped between 0 and 1
                float3 normalDot = saturate(dot(existingNormal, i.viewNormal));

                // lerp by dot value
                float foamDistance = lerp(_FoamMaxDistance, _FoamMinDistance, normalDot);

                // Modify cutoff value based on if within foam distance
                float foamDepthDifference01 = saturate(depthDifference / foamDistance);
                float surfaceNoiseCutoff = foamDepthDifference01 * _SurfaceNoiseCutoff;

                float2 distortionValue = (tex2D(_DistortionTexture, i.distortionUV).rg * 2 - 1) * _DistortionAmount;

                // getting noiseUV based on displacement caused by time and adding distortion values to it
                float2 noiseUV = float2((i.noiseUV.x + _Time.y * _SurfaceNoiseScroll.x) + distortionValue.r, (i.noiseUV.y + _Time.y * _SurfaceNoiseScroll.y) + distortionValue.g);

                // Apply cutoff on the noise sample
                float surfaceNoiseSample = tex2D(_SurfaceNoise, noiseUV).r;
                float surfaceNoise = smoothstep(surfaceNoiseCutoff - SMOOTHSTEP_AA, surfaceNoiseCutoff + SMOOTHSTEP_AA, surfaceNoiseSample);

                // Apply Color Tint to the foam
                float4 surfaceNoiseColor = _FoamColor;
                surfaceNoiseColor.a *= surfaceNoise;

                return alphaBlend(surfaceNoiseColor, waterColor);
            }
            ENDCG
        }
    }
}
